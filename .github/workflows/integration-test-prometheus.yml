name: Integration-test-qubership-open-telemetry-collector-prometheusremotewriteexporter
on:
  workflow_run:
    workflows: ["Build Artifacts"]
    types:
      - completed
  pull_request:
    branches:
      - all

env:
  kind_name: kind-cluster
  kind_version: v0.27.0
  vm_namespace: vm
  collector_namespace: monitoring
  max_attempts: 30
  delay: 10

permissions:
  contents: read

jobs:
  Run-Integration-Tests-Prometheus-Remote-Write-Exporter:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code otel-collecor
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: qubership-open-telemetry-collector

      - name: Set up Kind
        run: |
          curl -sLo ./kind https://kind.sigs.k8s.io/dl/${{ env.kind_version }}/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/
          kind delete cluster --name ${{ env.kind_name }}
          cat <<EOF | kind create cluster --config=-
          kind: Cluster
          name:  ${{ env.kind_name }}
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          EOF
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Build and load qubership-open-telemetry-collector
        run: |
                docker build ./qubership-open-telemetry-collector/ -t qubership-open-telemetry-collector
                kind --name ${{ env.kind_name }} load docker-image docker.io/library/qubership-open-telemetry-collector:latest

      - name: Install victoriametrics
        run: |
            helm repo add vm https://victoriametrics.github.io/helm-charts/
            helm repo update
            helm install victoria-metrics vm/victoria-metrics-single -n ${{ env.vm_namespace }} --create-namespace
            kubectl wait --for=condition=Ready pod --all -n ${{ env.vm_namespace }} --timeout=600s

      - name: Install qubership-open-telemetry-collector
        run: |
              helm upgrade --install -n ${{ env.collector_namespace }} --create-namespace qubership-open-telemetry-collector ./qubership-open-telemetry-collector/charts/open-telemetry-collector/
              kubectl wait --for=condition=Ready pod --all -n ${{ env.collector_namespace }} --timeout=60s

      - name: Configure prometheus remote write exporter for qubership
        run: |
              kubectl get configmap opentelemetry-collector-config -n ${{ env.collector_namespace }} -o 'go-template={{index .data "otel.yaml"}}' >> otel.yaml
              yq e '.receivers.prometheus_simple.endpoint = "qubership-open-telemetry-collector.${{ env.collector_namespace }}.svc.cluster.local:8888"' -i otel.yaml
              yq e '.receivers.prometheus_simple.collection_interval = "10s"' -i otel.yaml
              yq e '.service.pipelines.metrics.receivers +=["prometheus_simple"]' -i otel.yaml

              yq e '.exporters.prometheusremotewrite.endpoint = "http://victoria-metrics-victoria-metrics-single-server.${{ env.vm_namespace }}.svc.cluster.local:8428/api/v1/write"' -i otel.yaml
              yq e '.service.pipelines.metrics.exporters +=["prometheusremotewrite"]' -i otel.yaml

              kubectl delete configmap opentelemetry-collector-config -n ${{ env.collector_namespace }}
              kubectl create configmap opentelemetry-collector-config -n ${{ env.collector_namespace }} --from-file=otel.yaml

              kubectl describe configmap opentelemetry-collector-config -n ${{ env.collector_namespace }}

              kubectl delete pods -n ${{ env.collector_namespace }} --all
              sleep 20
              kubectl get pods -n ${{ env.collector_namespace }}
              POD_NAME=$(kubectl get pods --namespace ${{ env.collector_namespace }} -l "app.kubernetes.io/name=qubership-open-telemetry-collector" -o jsonpath="{.items[0].metadata.name}")
              kubectl logs $POD_NAME -n ${{ env.collector_namespace }}
              kubectl wait --for=condition=Ready pod --all -n ${{ env.collector_namespace }} --timeout=60s
      - name: Check OTEL telemetry come through remote write
        run: |
              VM_POD_NAME=$(kubectl get pods --namespace ${{ env.vm_namespace }} -l "app.kubernetes.io/name=victoria-metrics-single" -o jsonpath="{.items[0].metadata.name}")
              echo "VM server pod $VM_POD_NAME"
              echo "Start port forwarding"
              kubectl port-forward --namespace ${{ env.vm_namespace }} $VM_POD_NAME 8428:8428 &
              sleep 60
              echo "Start curl queries"
              curl http://localhost:8428/api/v1/query -d 'query={__name__!=""}' | jq '.' | grep otelcol
              count=$(curl http://localhost:8428/api/v1/query -d 'query={__name__!=""}' | jq '.' | grep -c otelcol)
              echo "$count"
              if [[ "$count" -gt 1 ]]; then
              true
              else
              false
              fi

      - name: Cleanup
        run: |
              kind delete cluster --name ${{ env.kind_name }}
