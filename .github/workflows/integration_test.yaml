name: Integration-test-qubership-open-telemetry-collector
on:
  workflow_run:
    workflows: ["Build Artifacts"]
    types:
      - completed
  pull_request:
    branches:
      - all

env:
  kind_name: kind-cluster
  kind_version: v0.27.0
  cassandra_namespace: cassandra
  jaeger_namespace: jaeger
  collector_namespace: monitoring
  max_attempts: 30
  delay: 10

permissions:
  contents: read

jobs:
  Run-Integration-Tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code otel-collecor
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: qubership-open-telemetry-collector

      - name: Checkout jaeger
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: 'Netcracker/qubership-jaeger'
          ref: 'main'
          path: qubership-jaeger
      - name: Install telemetrygen
        run: |
           sudo add-apt-repository -y ppa:longsleep/golang-backports
           sudo apt install -y golang-go
           go version
           export GOPATH=$HOME/go
           export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
           echo "Start telemetrygen install"
           go install github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest

      - name: Set up Kind
        run: |
          curl -sLo ./kind https://kind.sigs.k8s.io/dl/${{ env.kind_version }}/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/
          kind delete cluster --name ${{ env.kind_name }}
          cat <<EOF | kind create cluster --config=-
          kind: Cluster
          name:  ${{ env.kind_name }}
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          EOF
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Build and load qubership-open-telemetry-collector
        run: |
                docker build ./qubership-open-telemetry-collector/ -t qubership-open-telemetry-collector
                kind --name ${{ env.kind_name }} load docker-image docker.io/library/qubership-open-telemetry-collector:latest

      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager \
            --create-namespace --version v1.16.3 --set prometheus.enabled=true   --set crds.enabled=true

      - name: Install k8ssandra operator
        run: |
          helm repo add k8ssandra https://helm.k8ssandra.io/stable --force-update
          helm upgrade --install k8ssandra-operator k8ssandra/k8ssandra-operator -n ${{ env.cassandra_namespace }} --create-namespace
          kubectl wait --for=condition=Ready pod --all -n ${{ env.cassandra_namespace }} --timeout=120s

      - name: Deploy k8ssandra cluster
        run: |
              cat <<EOF | kubectl apply -n ${{ env.cassandra_namespace }} -f -
              apiVersion: k8ssandra.io/v1alpha1
              kind: K8ssandraCluster
              metadata:
                name: cassandra
              spec:
                cassandra:
                  serverVersion: "4.0.1"
                  datacenters:
                    - metadata:
                        name: dc1
                      size: 1
                      storageConfig:
                        cassandraDataVolumeClaimSpec:
                          storageClassName: standard
                          accessModes:
                            - ReadWriteOnce
                          resources:
                            requests:
                              storage: 5Gi
                      config:
                       jvmOptions:
                           heapSize: 512M
              EOF
              sleep 10
              kubectl rollout status --watch --timeout=600s statefulset/cassandra-dc1-default-sts -n ${{ env.cassandra_namespace }}

      - name: Install required crds
        run: |
            kubectl apply -f https://raw.githubusercontent.com/Netcracker/qubership-monitoring-operator/refs/heads/main/charts/qubership-monitoring-operator/charts/grafana-operator/crds/integreatly.org_grafanadashboards.yaml
            kubectl apply -f https://raw.githubusercontent.com/Netcracker/qubership-monitoring-operator/refs/heads/main/charts/qubership-monitoring-operator/charts/victoriametrics-operator/crds/monitoring.coreos.com_prometheusrules.yaml
            kubectl apply -f https://raw.githubusercontent.com/Netcracker/qubership-monitoring-operator/refs/heads/main/charts/qubership-monitoring-operator/charts/victoriametrics-operator/crds/monitoring.coreos.com_servicemonitors.yaml
            kubectl apply -f https://raw.githubusercontent.com/Netcracker/qubership-monitoring-operator/refs/heads/main/charts/qubership-monitoring-operator/charts/victoriametrics-operator/crds/monitoring.coreos.com_podmonitors.yaml


      - name: Install qubership-jaeger
        run: |
            CASSANDRA_USER=$(kubectl get secret -n ${{ env.cassandra_namespace }} cassandra-superuser -o json | jq -r '.data.username' | base64 -d)
            CASSANDRA_PASSWORD=$(kubectl get secret -n ${{ env.cassandra_namespace }} cassandra-superuser -o json | jq -r '.data.password' | base64 -d)
            CASSANDRA_SVC="cassandra-dc1-service.${{ env.cassandra_namespace }}.svc.cluster.local"
            helm upgrade --install qubership-jaeger ./qubership-jaeger/charts/qubership-jaeger --namespace ${{ env.jaeger_namespace}} \
            --create-namespace --set jaeger.prometheusMonitoringDashboard=false --set jaeger.prometheusMonitoring=false \
            --set "cassandraSchemaJob.host=$CASSANDRA_SVC" --set "cassandraSchemaJob.username=$CASSANDRA_USER" \
            --set "cassandraSchemaJob.password=$CASSANDRA_PASSWORD" --set cassandraSchemaJob.datacenter=dc1
            kubectl wait --for=condition=Ready pod --all -n ${{ env.jaeger_namespace }} --timeout=300s

      - name: Install qubership-open-telemetry-collector
        run: |
              helm upgrade --install -n ${{ env.collector_namespace }} --create-namespace qubership-open-telemetry-collector ./qubership-open-telemetry-collector/charts/open-telemetry-collector/ \
              --set JAEGER_COLLECTOR_HOST=jaeger-collector.${{ env.jaeger_namespace }}.svc.cluster.local \
              --set JAEGER_COLLECTOR_OTLP_PORT:=4317
              sleep 20
              kubectl get pods -n ${{ env.collector_namespace }}
              kubectl describe configmap opentelemetry-collector-config -n ${{ env.collector_namespace }}
              POD_NAME=$(kubectl get pods --namespace ${{ env.collector_namespace }} -l "app.kubernetes.io/name=qubership-open-telemetry-collector" -o jsonpath="{.items[0].metadata.name}")
              kubectl logs $POD_NAME -n ${{ env.collector_namespace }}
              kubectl wait --for=condition=Ready pod --all -n ${{ env.collector_namespace }} --timeout=120s

      - name: Run load
        run: |
             OTEL_COLLECTOR_POD_NAME=$(kubectl get pods --namespace ${{ env.collector_namespace }} -l "app.kubernetes.io/name=qubership-open-telemetry-collector" -o jsonpath="{.items[0].metadata.name}")
             echo "OTEL collector pod $OTEL_COLLECTOR_POD_NAME"
             echo "Start port forwarding"
             kubectl port-forward --namespace ${{ env.collector_namespace }} $OTEL_COLLECTOR_POD_NAME 4318:4318 &
             sleep 10
             export GOPATH=$HOME/go
             export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
             echo "OTEL collector status"
             kubectl get pods -n ${{ env.collector_namespace }}
             echo "Jaeger collector status"
             kubectl get pods -n ${{ env.jaeger_namespace }}
             telemetrygen traces --otlp-insecure --otlp-insecure-skip-verify --duration 10s --otlp-endpoint localhost:4318 --child-spans 10 --otlp-http --service testservice --workers 1 --rate 100

      - name: Check traces comming
        run: |
              echo "Jaeger pods"
              kubectl get pods -n ${{ env.jaeger_namespace }}
              echo "Jaeger services"
              kubectl get services -n ${{ env.jaeger_namespace }}
              POD_NAME=$(kubectl get pods --namespace ${{ env.jaeger_namespace }} -l "app.kubernetes.io/name=jaeger-query" -o jsonpath="{.items[0].metadata.name}")
              echo "$POD_NAME"
              echo "Start port forwarding"
              kubectl port-forward --namespace ${{ env.jaeger_namespace }} $POD_NAME 8090:16686 &
              sleep 30
              echo "Start curl queries"
              curl http://localhost:8090/api/traces?service=testservice | jq '.' | grep testservice
              echo "Traces count:"
              tracecount=$(curl http://localhost:8090/api/traces?service=testservice | jq '.' | grep -c testservice)
              echo "$tracecount"

              if [[ "$tracecount" -ge 1 ]]; then
              true
              else
              false
              fi

      - name: Cleanup
        run: |
              kind delete cluster --name ${{ env.kind_name }}
